"""Amazon Braket quantum circuit translator."""

from braket.circuits import Circuit
from braket.devices import LocalSimulator

from quantumgateway.quantum_translator.quantum_translator import QuantumTranslator


class BraketCircuit:
    """Wrapper class for Braket circuits with simulation capabilities."""

    def __init__(self, circuit):
        """Initialize the Braket circuit wrapper.

        Args:
            circuit: The Braket circuit object.
        """
        self.circuit = circuit

    def print_circuit(self):
        """Print the circuit representation."""
        print(self.circuit)

    def simulate(self):
        """Simulate the circuit using Braket's local simulator.

        Returns:
            dict: Measurement counts with reversed bit ordering to match other frameworks.
        """
        device = LocalSimulator()
        result = device.run(self.circuit, shots=1000).result()
        measurement_counts = {k[::-1]: v for k, v in result.measurement_counts.items()}

        return measurement_counts


class BraketTranslator(QuantumTranslator):
    """Translator for converting circuits to Amazon Braket format.

    This class handles the translation of high-level quantum circuits
    to Amazon Braket's circuit representation.
    """

    def translate(self, hl_circuit):
        """Translate high-level circuit to Braket format.

        Args:
            hl_circuit: The high-level quantum circuit to translate.

        Returns:
            BraketCircuit: Wrapped Braket circuit with simulation capabilities.
        """
        circuit = Circuit()

        for gate in hl_circuit.gates:
            if gate.name.lower() == "h":
                circuit.h(gate.qubits[0])
            elif gate.name.lower() == "cnot":
                circuit.cnot(gate.qubits[0], gate.qubits[1])
            elif gate.name.lower() == "x":
                circuit.x(gate.qubits[0])
            elif gate.name.lower() == "y":
                circuit.y(gate.qubits[0])
            elif gate.name.lower() == "z":
                circuit.z(gate.qubits[0])
            elif gate.name.lower() == "ry":
                circuit.ry(gate.qubits[0], gate.params[0])
            elif gate.name.lower() == "rx":
                circuit.rx(gate.qubits[0], gate.params[0])
            elif gate.name.lower() == "rz":
                circuit.rz(gate.qubits[0], gate.params[0])
            elif gate.name.lower() == "toffoli":
                circuit.ccnot(gate.qubits[0], gate.qubits[1], gate.qubits[2])
            elif gate.name.lower() == "swap":
                circuit.swap(gate.qubits[0], gate.qubits[1])
            elif gate.name.lower() == "cphase":
                circuit.cphaseshift(gate.qubits[0], gate.qubits[1], gate.params[0])
            elif gate.name.lower() == "cz":
                circuit.cz(gate.qubits[0], gate.qubits[1])
            elif gate.name.lower() == "cy":
                circuit.cy(gate.qubits[0], gate.qubits[1])
            elif gate.name.lower() == "measure":
                pass
            # Add other gate translations as needed

        return BraketCircuit(circuit)
