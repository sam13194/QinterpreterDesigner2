"""Quantum circuit representation module.

This module provides classes for representing quantum circuits and gates
in a framework-agnostic way.
"""


class QuantumCircuit:
    """Represents a quantum circuit with qubits and classical bits.

    This class provides a high-level representation of a quantum circuit
    that can be translated to different quantum computing frameworks.
    """

    def __init__(self, num_qubits, num_classical_bits=0):
        """Initialize a quantum circuit.

        Args:
            num_qubits (int): Number of quantum bits in the circuit.
            num_classical_bits (int, optional): Number of classical bits. Defaults to 0.
        """
        self.num_qubits = num_qubits
        self.num_classical_bits = num_classical_bits
        self.gates = []

    def add_gate(self, gate):
        """Add a quantum gate to the circuit.

        Args:
            gate (QuantumGate): The quantum gate to add to the circuit.
        """
        self.gates.append(gate)


class QuantumGate:
    """Represents a quantum gate operation.

    This class encapsulates the information needed to represent a quantum
    gate including its name, target qubits, and parameters.
    """

    def __init__(self, name, qubits, params=None):
        """Initialize a quantum gate.

        Args:
            name (str): Name of the quantum gate (e.g., 'H', 'CNOT', 'RY').
            qubits (list): List of qubit indices the gate acts on.
            params (list, optional): Gate parameters (for parameterized gates). Defaults to None.
        """
        self.name = name
        self.qubits = qubits
        self.params = params if params else []
