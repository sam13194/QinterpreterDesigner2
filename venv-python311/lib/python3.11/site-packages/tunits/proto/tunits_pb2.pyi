"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2024 The TUnits Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _UnitEnum:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _UnitEnumEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_UnitEnum.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    DECIBEL: _UnitEnum.ValueType  # 1
    """Power unit (dB)."""
    DECIBEL_MILLIWATTS: _UnitEnum.ValueType  # 2
    """Decibel-milliwatts (dBm)."""
    RADIANS: _UnitEnum.ValueType  # 3
    """Radians (rad)."""
    HERTZ: _UnitEnum.ValueType  # 4
    """Frequency unit (Hz)."""
    VOLT: _UnitEnum.ValueType  # 5
    """Electric potential Unit (V)."""
    SECOND: _UnitEnum.ValueType  # 6
    """Time unit (s)."""

class UnitEnum(_UnitEnum, metaclass=_UnitEnumEnumTypeWrapper):
    """Units supported for serialization."""

DECIBEL: UnitEnum.ValueType  # 1
"""Power unit (dB)."""
DECIBEL_MILLIWATTS: UnitEnum.ValueType  # 2
"""Decibel-milliwatts (dBm)."""
RADIANS: UnitEnum.ValueType  # 3
"""Radians (rad)."""
HERTZ: UnitEnum.ValueType  # 4
"""Frequency unit (Hz)."""
VOLT: UnitEnum.ValueType  # 5
"""Electric potential Unit (V)."""
SECOND: UnitEnum.ValueType  # 6
"""Time unit (s)."""
global___UnitEnum = UnitEnum

class _Scale:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ScaleEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Scale.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    YOTTA: _Scale.ValueType  # 24
    """Enum value should be the associated exponent.
    10^24
    """
    ZETTA: _Scale.ValueType  # 21
    """10^21"""
    EXA: _Scale.ValueType  # 18
    """10^18"""
    PETA: _Scale.ValueType  # 15
    """10^15"""
    TERA: _Scale.ValueType  # 12
    """10^12"""
    GIGA: _Scale.ValueType  # 9
    """10^9"""
    MEGA: _Scale.ValueType  # 6
    """10^6"""
    KILO: _Scale.ValueType  # 3
    """10^3"""
    HECTO: _Scale.ValueType  # 2
    """10^2"""
    DECAD: _Scale.ValueType  # 1
    """10^1"""
    UNITY: _Scale.ValueType  # 0
    """1"""
    DECI: _Scale.ValueType  # -1
    """10^-1"""
    CENTI: _Scale.ValueType  # -2
    """10^-2"""
    MILLI: _Scale.ValueType  # -3
    """10^-3"""
    MICRO: _Scale.ValueType  # -6
    """10^-6"""
    NANO: _Scale.ValueType  # -9
    """10^-9"""
    PICO: _Scale.ValueType  # -12
    """10^-12"""
    FEMTO: _Scale.ValueType  # -15
    """10^-15"""
    ATTO: _Scale.ValueType  # -18
    """10^-18"""
    ZEPTO: _Scale.ValueType  # -21
    """10^-21"""
    YOCTO: _Scale.ValueType  # -24
    """10^-24"""

class Scale(_Scale, metaclass=_ScaleEnumTypeWrapper): ...

YOTTA: Scale.ValueType  # 24
"""Enum value should be the associated exponent.
10^24
"""
ZETTA: Scale.ValueType  # 21
"""10^21"""
EXA: Scale.ValueType  # 18
"""10^18"""
PETA: Scale.ValueType  # 15
"""10^15"""
TERA: Scale.ValueType  # 12
"""10^12"""
GIGA: Scale.ValueType  # 9
"""10^9"""
MEGA: Scale.ValueType  # 6
"""10^6"""
KILO: Scale.ValueType  # 3
"""10^3"""
HECTO: Scale.ValueType  # 2
"""10^2"""
DECAD: Scale.ValueType  # 1
"""10^1"""
UNITY: Scale.ValueType  # 0
"""1"""
DECI: Scale.ValueType  # -1
"""10^-1"""
CENTI: Scale.ValueType  # -2
"""10^-2"""
MILLI: Scale.ValueType  # -3
"""10^-3"""
MICRO: Scale.ValueType  # -6
"""10^-6"""
NANO: Scale.ValueType  # -9
"""10^-9"""
PICO: Scale.ValueType  # -12
"""10^-12"""
FEMTO: Scale.ValueType  # -15
"""10^-15"""
ATTO: Scale.ValueType  # -18
"""10^-18"""
ZEPTO: Scale.ValueType  # -21
"""10^-21"""
YOCTO: Scale.ValueType  # -24
"""10^-24"""
global___Scale = Scale

@typing.final
class Fraction(google.protobuf.message.Message):
    """The exponent of a unit e.g.
    m^3 gives numerator=3, denominator=1.
    sqrt(Hz) gives numerator=1, denominator=2.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NUMERATOR_FIELD_NUMBER: builtins.int
    DENOMINATOR_FIELD_NUMBER: builtins.int
    numerator: builtins.int
    denominator: builtins.int
    def __init__(
        self,
        *,
        numerator: builtins.int | None = ...,
        denominator: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["denominator", b"denominator", "numerator", b"numerator"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["denominator", b"denominator", "numerator", b"numerator"]) -> None: ...

global___Fraction = Fraction

@typing.final
class Unit(google.protobuf.message.Message):
    """Unit message has a base unit, a scale and an exponent, e.g. 1/sqrt(ns)
    becomes unit=SECOND, scale=NANO, exponent.numerator=-1,
    exponent.denominator=2
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UNIT_FIELD_NUMBER: builtins.int
    SCALE_FIELD_NUMBER: builtins.int
    EXPONENT_FIELD_NUMBER: builtins.int
    unit: global___UnitEnum.ValueType
    scale: global___Scale.ValueType
    @property
    def exponent(self) -> global___Fraction: ...
    def __init__(
        self,
        *,
        unit: global___UnitEnum.ValueType | None = ...,
        scale: global___Scale.ValueType | None = ...,
        exponent: global___Fraction | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["exponent", b"exponent", "scale", b"scale", "unit", b"unit"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["exponent", b"exponent", "scale", b"scale", "unit", b"unit"]) -> None: ...

global___Unit = Unit

@typing.final
class Complex(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REAL_FIELD_NUMBER: builtins.int
    IMAGINARY_FIELD_NUMBER: builtins.int
    real: builtins.float
    imaginary: builtins.float
    def __init__(
        self,
        *,
        real: builtins.float | None = ...,
        imaginary: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["imaginary", b"imaginary", "real", b"real"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["imaginary", b"imaginary", "real", b"real"]) -> None: ...

global___Complex = Complex

@typing.final
class Value(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UNITS_FIELD_NUMBER: builtins.int
    REAL_VALUE_FIELD_NUMBER: builtins.int
    COMPLEX_VALUE_FIELD_NUMBER: builtins.int
    real_value: builtins.float
    @property
    def units(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Unit]:
        """Units are repeated to represent combinations of units (e.g. V*s and mV/us).
        Units are combined through multiplication.
        """

    @property
    def complex_value(self) -> global___Complex: ...
    def __init__(
        self,
        *,
        units: collections.abc.Iterable[global___Unit] | None = ...,
        real_value: builtins.float | None = ...,
        complex_value: global___Complex | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["complex_value", b"complex_value", "real_value", b"real_value", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["complex_value", b"complex_value", "real_value", b"real_value", "units", b"units", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["real_value", "complex_value"] | None: ...

global___Value = Value

@typing.final
class DoubleArray(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    def __init__(
        self,
        *,
        values: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___DoubleArray = DoubleArray

@typing.final
class ComplexArray(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Complex]: ...
    def __init__(
        self,
        *,
        values: collections.abc.Iterable[global___Complex] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___ComplexArray = ComplexArray

@typing.final
class ValueArray(google.protobuf.message.Message):
    """Represents an array with associated units (a collection of values that share
    the same units).
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UNITS_FIELD_NUMBER: builtins.int
    REALS_FIELD_NUMBER: builtins.int
    COMPLEXES_FIELD_NUMBER: builtins.int
    SHAPE_FIELD_NUMBER: builtins.int
    @property
    def units(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Unit]:
        """Units are repeated to represent combinations of units (e.g. V*s and mV/us).
        Units are combined through multiplication.
        """

    @property
    def reals(self) -> global___DoubleArray:
        """The flattened array."""

    @property
    def complexes(self) -> global___ComplexArray: ...
    @property
    def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The shape of the array."""

    def __init__(
        self,
        *,
        units: collections.abc.Iterable[global___Unit] | None = ...,
        reals: global___DoubleArray | None = ...,
        complexes: global___ComplexArray | None = ...,
        shape: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["complexes", b"complexes", "reals", b"reals", "values", b"values"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["complexes", b"complexes", "reals", b"reals", "shape", b"shape", "units", b"units", "values", b"values"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["values", b"values"]) -> typing.Literal["reals", "complexes"] | None: ...

global___ValueArray = ValueArray
